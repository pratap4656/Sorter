{"version":3,"sources":["logo.svg","sortingAlgorithms/sortingalgorithm.js","sorter/sorter.js","App.js","reportWebVitals.js","index.js"],"names":["getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","i","j","push","doMerge","SortingVisualizer","props","state","this","resetArray","num","randomIntFromInterval","setState","arrayBars","document","getElementsByClassName","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","newHeight","height","x","javaScriptSortedArray","sort","a","b","mergeSortedArray","console","log","arraysAreEqual","onClick","placeholder","id","newarray","getElementById","value","mergeSort","className","map","idx","React","Component","min","max","random","arrayOne","arrayTwo","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.dab78351.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","export function getMergeSortAnimations(array) {\n    const animations = [];\n    if (array.length <= 1) return array;\n    const auxiliaryArray = array.slice();\n    mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n    return animations;\n  }\n  \n  function mergeSortHelper(\n    mainArray,\n    startIdx,\n    endIdx,\n    auxiliaryArray,\n    animations,\n  ) {\n    if (startIdx === endIdx) return;\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\n    mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n    mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n    doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n  }\n  \n  \n  function doMerge(\n    mainArray,\n    startIdx,\n    middleIdx,\n    endIdx,\n    auxiliaryArray,\n    animations,\n  ) {\n    let k = startIdx;\n    let i = startIdx;\n    let j = middleIdx + 1;\n    while (i <= middleIdx && j <= endIdx) {\n      animations.push([i, j]);\n      animations.push([i, j]);\n      if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n        animations.push([k, auxiliaryArray[i]]);\n        mainArray[k++] = auxiliaryArray[i++];\n      } else {\n        animations.push([k, auxiliaryArray[j]]);\n        mainArray[k++] = auxiliaryArray[j++];\n      }\n    }\n    while (i <= middleIdx) {\n      animations.push([i, i]);\n      animations.push([i, i]);\n      animations.push([k, auxiliaryArray[i]]);\n      mainArray[k++] = auxiliaryArray[i++];\n    }\n    while (j <= endIdx) {\n      animations.push([j, j]);\n      animations.push([j, j]);\n      animations.push([k, auxiliaryArray[j]]);\n      mainArray[k++] = auxiliaryArray[j++];\n    }\n  }\n  ","import React from 'react';\nimport {getMergeSortAnimations} from '../sortingAlgorithms/sortingalgorithm';\nimport './SortingVisualizer.css';\n\n// Change this value for the speed of the animations.\nconst ANIMATION_SPEED_MS = 10;\n\n// Change this value for the number of bars (value) in the array.\nconst NUMBER_OF_ARRAY_BARS = 310;\n\n// This is the main color of the array bars.\nconst PRIMARY_COLOR = 'turquoise';\n\n// This is the color of array bars that are being compared throughout the animations.\nconst SECONDARY_COLOR = 'red';\n\nexport default class SortingVisualizer extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n        array: [],\n        };\n    }\n\n    componentDidMount() {\n        this.resetArray(205);\n    }\n\n    resetArray(num) {\n        const array = [];\n        for (let i = 0; i < num; i++) {\n            array.push(randomIntFromInterval(5, 730));\n        }\n        this.setState({array});\n    }\n\n    mergeSort() {\n        const animations = getMergeSortAnimations(this.state.array);\n        for (let i = 0; i < animations.length; i++) {\n            const arrayBars = document.getElementsByClassName('array-bar');\n            const isColorChange = i % 3 !== 2;\n                if (isColorChange) {\n                const [barOneIdx, barTwoIdx] = animations[i];\n                const barOneStyle = arrayBars[barOneIdx].style;\n                const barTwoStyle = arrayBars[barTwoIdx].style;\n                const color = i % 3 === 0 ? SECONDARY_COLOR : '#6373ff';\n                setTimeout(() => {\n                barOneStyle.backgroundColor = color;\n                barTwoStyle.backgroundColor = color;\n              }, i * ANIMATION_SPEED_MS);\n            } else {\n            setTimeout(() => {\n                const [barOneIdx, newHeight] = animations[i];\n                const barOneStyle = arrayBars[barOneIdx].style;\n                barOneStyle.height = `${newHeight}px`;\n              }, i * ANIMATION_SPEED_MS);\n            }\n          }\n    }\n    newarray(x) {\n        this.resetArray(x)\n    }\n\n\n    testSortingAlgorithms() {\n        for (let i = 0; i < 100; i++) {\n        const array = [];\n        const length = randomIntFromInterval(1, 1000);\n        for (let i = 0; i < length; i++) {\n            array.push(randomIntFromInterval(-1000, 1000));\n        }\n        const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n        const mergeSortedArray = getMergeSortAnimations(array.slice());\n        console.log(arraysAreEqual(javaScriptSortedArray, mergeSortedArray));\n        }\n    } \n\n    render() {\n        const {array} = this.state;\n\n        return (\n        <>\n            <header>\n                <button onClick={() => this.resetArray(randomIntFromInterval(150,200))}>new array\n                </button>\n                <input placeholder='set length of the array' id='xo'></input>\n                <button onClick={() => this.newarray(document.getElementById('xo').value)}>set</button>\n                <button onClick={() => this.mergeSort()}>mergeSort</button>\n            </header>\n            <div className=\"array-container\">\n                {array.map((value, idx) => (\n                <div\n                    className=\"array-bar\"\n                    key={idx}\n                    style={{\n                    backgroundColor: PRIMARY_COLOR,\n                    height: `${value}px`,\n                    }}></div>\n                ))}\n            </div>\n        </>\n        );\n    }\n}\n\n// From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\nfunction randomIntFromInterval(min, max) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\n\n\nfunction arraysAreEqual(arrayOne, arrayTwo) {\n  if (arrayOne.length !== arrayTwo.length) return false;\n  for (let i = 0; i < arrayOne.length; i++) {\n    if (arrayOne[i] !== arrayTwo[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n","import logo from './logo.svg';\nimport './App.css';\nimport SortingVisualizer from './sorter/sorter'\n\n\nfunction App() {\n  return (\n    <SortingVisualizer/>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}